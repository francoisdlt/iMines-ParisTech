//
//  PetitsCoursTVC.m
//  iMines-1
//
//  Created by François de la Taste on 31/08/10.
//  Copyright 2010 Mines ParisTech. All rights reserved.
//

#import "PetitsCoursTVC.h"
#import "InscriptionPetitCoursVC.h"

#define TAG_MATIERE 1
#define TAG_ADRESSE 2
#define TAG_NIVEAU 3
#define TAG_COMMENTAIRE 4

@implementation PetitsCoursTVC
@synthesize tvCell;

#pragma mark -
#pragma mark View lifecycle


- (void)viewDidLoad {
    [super viewDidLoad];

	if ([stories count] == 0) {
		
		NSString * path = FLUX;
		/* Operation Queue init (autorelease) : on crée une nouvelle opération pour laisser la main à l'utilisateur*/
		NSOperationQueue *queue = [NSOperationQueue new];
		
		/* Create our NSInvocationOperation to call loadDataWithOperation, passing in nil */
		NSInvocationOperation *operation = [[NSInvocationOperation alloc] initWithTarget:self
																				selector:@selector(parseXMLFileAtURL:)
																				  object:path];
		
		/* Add the operation to the queue */
		[queue addOperation:operation];
		
}
}

/*
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
}
*/
/*
- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
}
*/
/*
- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
}
*/
/*
- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
}
*/
/*
// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}
*/


#pragma mark -
#pragma mark Table view data source

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
	return 100;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    // Return the number of sections.
    return [stories count];
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    // Return the number of rows in the section.
    return 1;
}


// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    static NSString *CellIdentifier = @"PetitCoursCell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        [[NSBundle mainBundle] loadNibNamed:@"PetitCoursCell" owner:self options:nil];
        cell = tvCell;
        self.tvCell = nil;;
    }
	int storyIndex = indexPath.section;
	UILabel *label;
    label = (UILabel *)[cell viewWithTag:TAG_MATIERE];
    label.text = [[stories objectAtIndex: storyIndex] objectForKey: @"matiere"];
	
    label = (UILabel *)[cell viewWithTag:TAG_ADRESSE];
    label.text = label.text = [[stories objectAtIndex: storyIndex] objectForKey: @"adresse"];
   
	label = (UILabel *)[cell viewWithTag:TAG_NIVEAU];
    label.text = [[stories objectAtIndex: storyIndex] objectForKey: @"niveau"];
	
    label = (UILabel *)[cell viewWithTag:TAG_COMMENTAIRE];
    label.text = label.text = [[stories objectAtIndex: storyIndex] objectForKey: @"commentaire"];
	cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    return cell;
}


/*
// Override to support conditional editing of the table view.
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the specified item to be editable.
    return YES;
}
*/


/*
// Override to support editing the table view.
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Delete the row from the data source
        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:YES];
    }   
    else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
    }   
}
*/


/*
// Override to support rearranging the table view.
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath {
}
*/


/*
// Override to support conditional rearranging of the table view.
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the item to be re-orderable.
    return YES;
}
*/


#pragma mark -
#pragma mark Table view delegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    // Navigation logic may go here. Create and push another view controller.
	NSMutableDictionary *pc = [stories objectAtIndex:indexPath.section];
	 InscriptionPetitCoursVC *detailViewController = [[InscriptionPetitCoursVC alloc] initWithPetitCours:pc];
    //[pc release]; 
	// ...
     // Pass the selected object to the new view controller.
	 [self.navigationController pushViewController:detailViewController animated:YES];
	 [detailViewController release];
	 
}


#pragma mark -
#pragma mark Memory management

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Relinquish ownership any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
    // Relinquish ownership of anything that can be recreated in viewDidLoad or on demand.
    // For example: self.myOutlet = nil;
}


- (void)dealloc {
    [super dealloc];
}
#pragma mark -
#pragma mark RSS Parsing
	
	- (void)parseXMLFileAtURL:(NSString *)URL {
		
		//On lance le activity indicator
		activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];	
		CGRect frame = activityIndicator.frame;
		frame.origin = CGPointMake(self.view.frame.size.width/2 - 15.0, self.view.frame.size.height/2 - 15.0);
		activityIndicator.frame = frame;
		activityIndicator.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin;
		[self.tableView addSubview:activityIndicator];
		[activityIndicator startAnimating];
		[UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
		
		
		stories = [[NSMutableArray alloc] init];
		
		//you must then convert the path to a proper NSURL or it won't work
		NSURL *xmlURL = [NSURL URLWithString:URL];
		
		// here, for some reason you have to use NSClassFromString when trying to alloc NSXMLParser, otherwise you will get an object not found error
		// this may be necessary only for the toolchain
		rssParser = [[NSXMLParser alloc] initWithContentsOfURL:xmlURL];
		
		// Set self as the delegate of the parser so that it will receive the parser delegate methods callbacks.
		[rssParser setDelegate:self];
		
		// Depending on the XML document you're parsing, you may want to enable these features of NSXMLParser.
		[rssParser setShouldProcessNamespaces:NO];
		[rssParser setShouldReportNamespacePrefixes:NO];
		[rssParser setShouldResolveExternalEntities:NO];
		
		[rssParser parse];
	}
	
	- (void)parserDidStartDocument:(NSXMLParser *)parser {
		NSLog(@"found file and started parsing");
	}
	
	- (void)parser:(NSXMLParser *)parser parseErrorOccurred:(NSError *)parseError {
		NSString * errorString = [NSString stringWithFormat:@"Problème de téléchargement ! (Error code %i )", [parseError code]];
		NSLog(@"error parsing XML: %@", errorString);
		
		UIAlertView * errorAlert = [[UIAlertView alloc] initWithTitle:@"Erreur :" message:errorString delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
		[activityIndicator stopAnimating];
		[UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
		[errorAlert show];
		
	}
	
	- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict{
		NSLog(@"found this element: %@", elementName);
		currentElement = [elementName copy];
		
		if ([elementName isEqualToString:@"item"]) { // Si on tombe sur une nouvelle entrée
			// clear out our story item caches...
			item = [[NSMutableDictionary alloc] init];
			currentNiveau = [[NSMutableString alloc] init];
			currentAdresse = [[NSMutableString alloc] init];
			currentNom = [[NSMutableString alloc] init];
			currentMatiere = [[NSMutableString alloc] init];
			currentCommentaire = [[NSMutableString alloc] init];
			currentLienInscription = [[NSMutableString alloc] init];
			currentID = [[NSMutableString alloc] init];
		}
	}
	
	- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName{
		
		NSLog(@"ended element: %@", elementName);
		if ([elementName isEqualToString:@"item"]) {
			
			// save values to an item, then store that item into the array...
			
			[item setObject:currentNiveau forKey:@"niveau"];
			[item setObject:currentAdresse forKey:@"adresse"];
			[item setObject:currentNom forKey:@"nom"];
			[item setObject:currentMatiere forKey:@"matiere"];
			[item setObject:currentCommentaire forKey:@"commentaire"];
			[item setObject:currentLienInscription forKey:@"inscription"];
			[item setObject:currentID forKey:@"id"];
			[stories addObject:[item copy]];
			NSLog(@"adding story: %@", currentNom);
		}
	}
	
	- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string{
		NSLog(@"found characters: %@", string);
		// save the characters for the current item...
		if ([currentElement isEqualToString:@"nom"]) {
			[currentNom appendString:string];
		} else if ([currentElement isEqualToString:@"niveau"]) {
			[currentNiveau appendString:string];
		} else if ([currentElement isEqualToString:@"adresse"]) {
			[currentAdresse appendString:string];
		} else if ([currentElement isEqualToString:@"matiere"]) {
			[currentMatiere appendString:string];
		} else if ([currentElement isEqualToString:@"commentaire"]) {
			[currentCommentaire appendString:string];
		} else if ([currentElement isEqualToString:@"inscription"]) {
			[currentLienInscription appendString:string];
		} else if ([currentElement isEqualToString:@"id"]) {
			[currentID appendString:string];
		}
		
		
	}
	
	- (void)parserDidEndDocument:(NSXMLParser *)parser {
		
		[activityIndicator stopAnimating];
		[UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
		[activityIndicator removeFromSuperview];
		
		NSLog(@"all done!");
		NSLog(@"stories array has %d items", [stories count]);
		[newsTable reloadData];
		[self.tableView performSelectorOnMainThread:@selector(reloadData) withObject:nil waitUntilDone:YES];
		
	}
	
	
	

@end

